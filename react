import React, { useEffect, useRef, useState } from "react";
import { Stage, Layer, Image as KonvaImage, Transformer } from "react-konva";

// Hook: load an image into HTMLImageElement
function useImage(src) {
  const [image, setImage] = useState(null);
  useEffect(() => {
    if (!src) return;
    const img = new window.Image();
    img.crossOrigin = "Anonymous";
    img.src = src;
    img.onload = () => setImage(img);
  }, [src]);
  return image;
}

export default function App() {
  const canvasWidth = 500;
  const canvasHeight = 500;

  // Fixed QR image
  const qrUrl =
    "https://api.qrserver.com/v1/create-qr-code/?size=500x500&data=Hello";

  // Background image state (can be uploaded)
  const [bgUrl, setBgUrl] = useState(null);

  const qrImage = useImage(qrUrl);
  const bgImage = useImage(bgUrl);

  const bgRef = useRef(null);
  const trRef = useRef(null);

  const [payload, setPayload] = useState(null);

  useEffect(() => {
    if (trRef.current && bgRef.current) {
      trRef.current.nodes([bgRef.current]);
      trRef.current.getLayer().batchDraw();
    }
  }, [bgImage]);

  const updatePayload = () => {
    if (!bgRef.current) return;

    const node = bgRef.current;
    const scaleX = node.scaleX();
    const scaleY = node.scaleY();

    const width = node.width() * scaleX;
    const height = node.height() * scaleY;

    const x = node.x();
    const y = node.y();
    const rotation = node.rotation();

    const anchor = { ax: 0.5, ay: 0.5 }; // center anchor

    const json = {
      canvasWidth,
      canvasHeight,
      qrUrl,
      bgUrl,
      transform: {
        normX: x / canvasWidth,
        normY: y / canvasHeight,
        normW: width / canvasWidth,
        rotation,
        anchor,
        opacity: node.opacity()
      }
    };
    setPayload(json);
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    const objectUrl = URL.createObjectURL(file);
    setBgUrl(objectUrl);
  };

  return (
    <div>
      <h2>QR + Background Editor</h2>

      <input type="file" accept="image/*" onChange={handleFileChange} />

      <Stage
        width={canvasWidth}
        height={canvasHeight}
        style={{ border: "1px solid #ccc", marginTop: "10px" }}
      >
        <Layer>
          {qrImage && (
            <KonvaImage
              image={qrImage}
              width={canvasWidth}
              height={canvasHeight}
            />
          )}

          {bgImage && (
            <KonvaImage
              ref={bgRef}
              image={bgImage}
              x={100}
              y={100}
              width={150}
              height={150}
              draggable
              rotation={0}
              opacity={1}
              onDragEnd={updatePayload}
              onTransformEnd={updatePayload}
              onClick={updatePayload}
            />
          )}
          <Transformer ref={trRef} rotateEnabled={true} />
        </Layer>
      </Stage>

      <h3>Transform JSON (send to backend)</h3>
      <pre
        style={{
          fontSize: "12px",
          background: "#f7f7f7",
          padding: "10px",
          maxHeight: "200px",
          overflow: "auto"
        }}
      >
        {payload
          ? JSON.stringify(payload, null, 2)
          : "Upload a background image and interact with it to see JSON"}
      </pre>
    </div>
  );
}