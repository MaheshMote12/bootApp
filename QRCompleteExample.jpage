import java.awt.*;
import java.awt.geom.Ellipse2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;

public class LogoStyler {

    public static BufferedImage circularLogoWithBorder(BufferedImage logo, int logoSize, int borderSize) {
        int finalSize = logoSize + borderSize * 2;
        Image scaled = logo.getScaledInstance(logoSize, logoSize, Image.SCALE_SMOOTH);
        BufferedImage resized = new BufferedImage(logoSize, logoSize, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = resized.createGraphics();
        g2.drawImage(scaled, 0, 0, null);
        g2.dispose();

        BufferedImage circleBuffer = new BufferedImage(finalSize, finalSize, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = circleBuffer.createGraphics();
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.setColor(Color.WHITE);
        g.fillOval(0, 0, finalSize, finalSize);
        g.setClip(new Ellipse2D.Float(borderSize, borderSize, logoSize, logoSize));
        g.drawImage(resized, borderSize, borderSize, null);
        g.dispose();
        return circleBuffer;
    }

    public static BufferedImage roundedRectangleLogoWithBorder(BufferedImage logo, int logoSize, int borderSize, int cornerRadius) {
        int finalSize = logoSize + borderSize * 2;
        Image scaled = logo.getScaledInstance(logoSize, logoSize, Image.SCALE_SMOOTH);
        BufferedImage resized = new BufferedImage(logoSize, logoSize, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = resized.createGraphics();
        g2.drawImage(scaled, 0, 0, null);
        g2.dispose();

        BufferedImage output = new BufferedImage(finalSize, finalSize, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = output.createGraphics();
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.setColor(Color.WHITE);
        g.fillRoundRect(0, 0, finalSize, finalSize, cornerRadius, cornerRadius);
        g.setClip(new RoundRectangle2D.Float(borderSize, borderSize, logoSize, logoSize, cornerRadius, cornerRadius));
        g.drawImage(resized, borderSize, borderSize, null);
        g.dispose();
        return output;
    }

    public static BufferedImage circularLogoWithShadow(BufferedImage logo, int logoSize, int borderSize, int shadowOffset) {
        int totalSize = logoSize + borderSize * 2 + shadowOffset;
        Image scaled = logo.getScaledInstance(logoSize, logoSize, Image.SCALE_SMOOTH);
        BufferedImage resized = new BufferedImage(logoSize, logoSize, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = resized.createGraphics();
        g2.drawImage(scaled, 0, 0, null);
        g2.dispose();

        BufferedImage finalImage = new BufferedImage(totalSize, totalSize, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = finalImage.createGraphics();
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        g.setColor(new Color(0, 0, 0, 80)); // shadow
        g.fillOval(shadowOffset, shadowOffset, logoSize + borderSize * 2, logoSize + borderSize * 2);
        g.setColor(Color.WHITE);
        g.fillOval(0, 0, logoSize + borderSize * 2, logoSize + borderSize * 2);
        g.setClip(new Ellipse2D.Float(borderSize, borderSize, logoSize, logoSize));
        g.drawImage(resized, borderSize, borderSize, null);
        g.dispose();
        return finalImage;
    }
}



import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.client.j2se.MatrixToImageWriter;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.HashMap;
import java.util.Map;

public class QRCodeWithLogoExample {

    public static void main(String[] args) throws Exception {
        String qrText = "https://example.com";
        int qrSize = 400;

        // Step 1: Generate QR Code
        Map<EncodeHintType, Object> hints = new HashMap<>();
        hints.put(EncodeHintType.MARGIN, 1);
        BitMatrix bitMatrix = new MultiFormatWriter()
                .encode(qrText, BarcodeFormat.QR_CODE, qrSize, qrSize, hints);
        BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(bitMatrix);

        // Step 2: Load logo
        BufferedImage logo = ImageIO.read(new File("logo.png")); // Place your logo.png in project root

        // Step 3: Style logo using one of the 3 styles
        BufferedImage styledLogo = LogoStyler.circularLogoWithBorder(logo, 80, 6);
        // BufferedImage styledLogo = LogoStyler.roundedRectangleLogoWithBorder(logo, 80, 6, 20);
        // BufferedImage styledLogo = LogoStyler.circularLogoWithShadow(logo, 80, 6, 4);

        // Step 4: Place logo at center
        Graphics2D g = qrImage.createGraphics();
        int centerX = (qrImage.getWidth() - styledLogo.getWidth()) / 2;
        int centerY = (qrImage.getHeight() - styledLogo.getHeight()) / 2;
        g.drawImage(styledLogo, centerX, centerY, null);
        g.dispose();

        // Step 5: Save final image
        ImageIO.write(qrImage, "png", new File("qr_with_logo.png"));
        System.out.println("âœ… QR code with logo saved as qr_with_logo.png");
    }
}

