// src/main/java/com/example/sftp/config/SftpConfig.java
package com.example.sftp.config;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

@Configuration
@ConfigurationProperties(prefix = "sftp")
public class SftpConfig {
    private String host;
    private int port = 22;
    private String username;
    private String password;
    private String remoteDir;

    public String getHost() { return host; }
    public void setHost(String host) { this.host = host; }
    public int getPort() { return port; }
    public void setPort(int port) { this.port = port; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
    public String getRemoteDir() { return remoteDir; }
    public void setRemoteDir(String remoteDir) { this.remoteDir = remoteDir; }
}


// src/main/java/com/example/sftp/pool/SftpSessionManager.java
package com.example.sftp.pool;

import com.example.sftp.config.SftpConfig;
import org.apache.sshd.client.SshClient;
import org.apache.sshd.client.session.ClientSession;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.concurrent.TimeUnit;

@Component
public class SftpSessionManager {

    private final SshClient client;
    private final SftpConfig config;

    public SftpSessionManager(SftpConfig config) {
        this.config = config;
        this.client = SshClient.setUpDefaultClient();
        this.client.start();
    }

    public ClientSession createSession() throws IOException {
        try {
            ClientSession session = client.connect(config.getUsername(),
                    config.getHost(), config.getPort())
                    .verify(10, TimeUnit.SECONDS)
                    .getSession();
            session.addPasswordIdentity(config.getPassword());
            session.auth().verify(10, TimeUnit.SECONDS);
            return session;
        } catch (Exception e) {
            throw new IOException("Failed to create SFTP session", e);
        }
    }

    public void close() {
        client.stop();
    }
}

// src/main/java/com/example/sftp/pool/SftpSessionPoolManager.java
package com.example.sftp.pool;

import com.example.sftp.config.SftpConfig;
import org.apache.sshd.client.session.ClientSession;
import org.springframework.stereotype.Component;

import javax.annotation.PreDestroy;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Component
public class SftpSessionPoolManager {

    private final List<ClientSession> sessions = new ArrayList<>();
    private final SftpSessionManager sessionManager;

    public SftpSessionPoolManager(SftpSessionManager sessionManager, SftpConfig config) throws IOException {
        this.sessionManager = sessionManager;
        for (int i = 0; i < 3; i++) {
            sessions.add(sessionManager.createSession());
        }
    }

    public List<ClientSession> getSessions() {
        return sessions;
    }

    @PreDestroy
    public void closeAll() {
        for (ClientSession session : sessions) {
            try {
                session.close();
            } catch (Exception ignored) {}
        }
        sessionManager.close();
    }
}



// src/main/java/com/example/sftp/pool/SftpChannelFactory.java
package com.example.sftp.pool;

import org.apache.commons.pool2.PooledObject;
import org.apache.commons.pool2.PooledObjectFactory;
import org.apache.commons.pool2.impl.DefaultPooledObject;
import org.apache.sshd.client.session.ClientSession;
import org.apache.sshd.sftp.client.SftpClient;
import org.apache.sshd.sftp.client.SftpClientFactory;

import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

public class SftpChannelFactory implements PooledObjectFactory<SftpClient> {

    private final List<ClientSession> sessions;
    private final AtomicInteger counter = new AtomicInteger(0);

    public SftpChannelFactory(List<ClientSession> sessions) {
        this.sessions = sessions;
    }

    @Override
    public PooledObject<SftpClient> makeObject() throws Exception {
        int index = counter.getAndIncrement() % sessions.size();
        ClientSession session = sessions.get(index);
        SftpClient client = SftpClientFactory.instance().createSftpClient(session);
        return new DefaultPooledObject<>(client);
    }

    @Override
    public void destroyObject(PooledObject<SftpClient> p) throws Exception {
        p.getObject().close();
    }

    @Override
    public boolean validateObject(PooledObject<SftpClient> p) {
        return !p.getObject().isClosed();
    }

    @Override
    public void activateObject(PooledObject<SftpClient> p) {}

    @Override
    public void passivateObject(PooledObject<SftpClient> p) {}
}


// src/main/java/com/example/sftp/pool/SftpChannelPool.java
package com.example.sftp.pool;

import org.apache.commons.pool2.impl.GenericObjectPool;
import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
import org.apache.sshd.sftp.client.SftpClient;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;

@Component
public class SftpChannelPool {

    private final GenericObjectPool<SftpClient> pool;

    public SftpChannelPool(SftpSessionPoolManager sessionPoolManager) {
        GenericObjectPoolConfig<SftpClient> config = new GenericObjectPoolConfig<>();
        config.setMaxTotal(12);
        config.setMaxIdle(12);
        config.setMinIdle(12);
        config.setBlockWhenExhausted(true);
        config.setMaxWaitMillis(5000);
        this.pool = new GenericObjectPool<>(new SftpChannelFactory(sessionPoolManager.getSessions()), config);
    }

    @PostConstruct
    public void initializePool() throws Exception {
        for (int i = 0; i < 12; i++) {
            pool.addObject();
        }
    }

    public SftpClient borrowObject() throws Exception {
        return pool.borrowObject();
    }

    public void returnObject(SftpClient client) {
        if (client != null) {
            pool.returnObject(client);
        }
    }

    public PoolStats getStats() {
        return new PoolStats(pool.getNumActive(), pool.getNumIdle(), pool.getNumWaiters());
    }

    public record PoolStats(int active, int idle, int waiting) {}
}



// src/main/java/com/example/sftp/metrics/SftpPoolMetricsBinder.java
package com.example.sftp.metrics;

import com.example.sftp.pool.SftpChannelPool;
import io.micrometer.core.instrument.Gauge;
import io.micrometer.core.instrument.MeterRegistry;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;

@Component
public class SftpPoolMetricsBinder {

    private final SftpChannelPool pool;
    private final MeterRegistry registry;

    public SftpPoolMetricsBinder(SftpChannelPool pool, MeterRegistry registry) {
        this.pool = pool;
        this.registry = registry;
    }

    @PostConstruct
    public void bindMetrics() {
        Gauge.builder("sftp.pool.active", () -> pool.getStats().active())
                .description("Active SFTP channels in use")
                .register(registry);

        Gauge.builder("sftp.pool.idle", () -> pool.getStats().idle())
                .description("Idle SFTP channels available")
                .register(registry);

        Gauge.builder("sftp.pool.waiting", () -> pool.getStats().waiting())
                .description("Threads waiting for a channel")
                .register(registry);
    }
}


// src/main/java/com/example/sftp/service/SftpService.java
package com.example.sftp.service;

import com.example.sftp.config.SftpConfig;
import com.example.sftp.pool.SftpChannelPool;
import org.apache.sshd.sftp.client.SftpClient;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.InputStream;

@Service
public class SftpService {

    private final SftpChannelPool channelPool;
    private final SftpConfig config;

    public SftpService(SftpChannelPool channelPool, SftpConfig config) {
        this.channelPool = channelPool;
        this.config = config;
    }

    public void uploadFiles(MultipartFile[] files) throws Exception {
        SftpClient client = null;
        try {
            client = channelPool.borrowObject();
            for (MultipartFile file : files) {
                String target = config.getRemoteDir() + "/" + file.getOriginalFilename();
                try (InputStream in = file.getInputStream();
                     SftpClient.CloseableHandle handle = client.open(target,
                             SftpClient.OpenMode.Write,
                             SftpClient.OpenMode.Create,
                             SftpClient.OpenMode.Truncate)) {
                    client.write(handle, 0, in);
                }
            }
        } finally {
            channelPool.returnObject(client);
        }
    }
}





